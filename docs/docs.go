// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "fiber@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "post": {
                "description": "get the status of server.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gift"
                ],
                "summary": "Creates a new gift.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Gift"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/offlineshop": {
            "post": {
                "description": "Принимает JSON тело запроса с полями Offline Shop и создает новый Offline Shop",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OfflineShops"
                ],
                "summary": "Создает новый Offline Shop",
                "parameters": [
                    {
                        "description": "Create Offline Shop",
                        "name": "OfflineShop",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.OfflineShops"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.OfflineShops"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/offlineshop/{id}": {
            "put": {
                "description": "Принимает JSON тело запроса с обновленными полями Offline Shop и обновляет существующий Offline Shop по его ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OfflineShops"
                ],
                "summary": "Обновляет существующий Offline Shop по ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Offline Shop ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Offline Shop",
                        "name": "OfflineShop",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.OfflineShops"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.OfflineShops"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "delete": {
                "description": "Принимает ID офлайн магазина в URL и удаляет соответствующий офлайн магазин",
                "tags": [
                    "OfflineShops"
                ],
                "summary": "Удаляет существующий Offline Shop по ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Offline Shop ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Offline Shop deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Offline Shop not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/offlineshops": {
            "get": {
                "description": "Возвращает список всех офлайн магазинов OfflineShops",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OfflineShops"
                ],
                "summary": "Получает список офлайн магазинов OfflineShops",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.OfflineShops"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/offlineshops/{id}": {
            "get": {
                "description": "Возвращает информацию о конкретном офлайн магазине OfflineShops по его ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OfflineShops"
                ],
                "summary": "Получает один офлайн магазин OfflineShops по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "OfflineShops ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.OfflineShops"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "OfflineShops not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/quest": {
            "get": {
                "description": "Возвращает список всех квестов Quest",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quest"
                ],
                "summary": "Получает список квестов Quest",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Quest"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "post": {
                "description": "Принимает JSON тело запроса с полями Quest и создает новый Quest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quest"
                ],
                "summary": "Создает новый Quest",
                "parameters": [
                    {
                        "description": "Create Quest",
                        "name": "Quest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Quest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Quest"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/quest/{id}": {
            "delete": {
                "description": "Принимает ID квеста в URL и удаляет соответствующий квест",
                "tags": [
                    "Quest"
                ],
                "summary": "Удаляет существующий Quest по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Quest ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quest deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Quest not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/subquest": {
            "get": {
                "description": "Возвращает список всех подзаданий (Subquest)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subquest"
                ],
                "summary": "Получает список Subquest",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Subquest"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "post": {
                "description": "Принимает JSON тело запроса с полями Subquest и создает новый Subquest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subquest"
                ],
                "summary": "Создает новый Subquest",
                "parameters": [
                    {
                        "description": "Create Subquest",
                        "name": "Subquest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Subquest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Subquest"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/subquest/{id}": {
            "get": {
                "description": "Возвращает информацию о конкретном подзадании (Subquest) по его ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subquest"
                ],
                "summary": "Получает одно Subquest по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subquest ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Subquest"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Subquest not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Принимает JSON тело запроса с обновленными полями Subquest и обновляет существующий Subquest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subquest"
                ],
                "summary": "Обновляет существующий Subquest",
                "parameters": [
                    {
                        "description": "Update Subquest",
                        "name": "Subquest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Subquest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Subquest"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "delete": {
                "description": "Принимает ID подзадания в URL и удаляет соответствующее подзадание",
                "tags": [
                    "Subquest"
                ],
                "summary": "Удаляет существующий Subquest по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subquest ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subquest deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Subquest not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tasks": {
            "get": {
                "description": "Возвращает список всех заданий Tasks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Получает список заданий Tasks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Tasks"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "post": {
                "description": "Принимает JSON тело запроса с полями Tasks и создает новое задание",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Создает новое задание Tasks",
                "parameters": [
                    {
                        "description": "Create Tasks",
                        "name": "Tasks",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Tasks"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Tasks"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/tasks/{id}": {
            "get": {
                "description": "Возвращает информацию о конкретном задании Tasks по его ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Получает одно задание Tasks по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tasks ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Tasks"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Tasks not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Принимает JSON тело запроса с обновленными полями Tasks и обновляет существующее задание",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Обновляет существующее задание Tasks",
                "parameters": [
                    {
                        "description": "Update Tasks",
                        "name": "Tasks",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Tasks"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Tasks"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "delete": {
                "description": "Принимает ID задания в URL и удаляет соответствующее задание",
                "tags": [
                    "Tasks"
                ],
                "summary": "Удаляет существующее задание Tasks по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tasks ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Tasks not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "db.Gift": {
            "type": "object",
            "properties": {
                "comments": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "description": "LIFEHACK: use string id like 'gift_ajdsjanjklsnls'",
                    "type": "string"
                },
                "is_favorite": {
                    "type": "boolean"
                },
                "link": {
                    "type": "string"
                },
                "name": {
                    "description": "UserID      string ` + "`" + `json:\"user_id\"` + "`" + `",
                    "type": "string"
                },
                "photo": {
                    "type": "string"
                },
                "price": {
                    "description": "TODO: use decimal.Decimal instead of int",
                    "type": "integer"
                }
            }
        },
        "db.OfflineShops": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "db.Quest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "is_done": {
                    "type": "boolean"
                },
                "subquest_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "db.Subquest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "is_done": {
                    "type": "boolean"
                },
                "reward": {
                    "type": "integer"
                },
                "task_id": {
                    "type": "string"
                }
            }
        },
        "db.Tasks": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "server.ResponseHTTP": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:7777",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Wishlist",
	Description:      "This is a sample swagger for Fiber",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
