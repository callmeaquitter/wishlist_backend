{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample swagger for Fiber",
        "title": "Wishlist",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "fiber@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:7777",
    "basePath": "/",
    "paths": {
        "/booked_gifts": {
            "post": {
                "description": "Creates a booked gift in the wishlist based on the provided data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BookedGifts"
                ],
                "summary": "Creates a booked gift in the wishlist.",
                "parameters": [
                    {
                        "description": "Booked Gift in Wishlist object to be created",
                        "name": "BookedGiftInWishlist",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.BookedGiftInWishlist"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.BookedGiftInWishlist"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/booked_gifts/{gift_id}": {
            "delete": {
                "description": "Deletes a booked gift from the wishlist based on the provided gift ID and user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BookedGifts"
                ],
                "summary": "Deletes a booked gift from the wishlist.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the booked gift to be deleted",
                        "name": "gift_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.BookedGiftInWishlist"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/booked_gifts/{user_id}": {
            "get": {
                "description": "Finds all booked gifts in the wishlist for a specific user based on the provided user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BookedGifts"
                ],
                "summary": "Finds booked gifts for a specific user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the user",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/db.BookedGiftInWishlist"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/commentToSelection": {
            "post": {
                "description": "Принимает CommentToSelection в теле запроса и создает соответствующий CommentToSelection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CommentToSelection"
                ],
                "summary": "Создает новый CommentToSelection",
                "parameters": [
                    {
                        "description": "Create CommentToSelection",
                        "name": "CommentToSelection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.CommentToSelection"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/commentToSelection/{id}": {
            "get": {
                "description": "Принимает id Selection в качестве параметра пути и возвращает комментарии для соответствующего Selection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CommentToSelection"
                ],
                "summary": "Получает комментарии для Selection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Selection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "put": {
                "description": "Принимает id CommentToSelection в качестве параметра пути и обновляет соответствующий CommentToSelection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CommentToSelection"
                ],
                "summary": "Обновляет существующий CommentToSelection",
                "parameters": [
                    {
                        "description": "Update CommentToSelection",
                        "name": "CommentToSelection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.CommentToSelection"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "delete": {
                "description": "Принимает id CommentToSelection в качестве параметра пути и удаляет соответствующий CommentToSelection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CommentToSelection"
                ],
                "summary": "Удаляет существующий CommentToSelection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CommentToSelection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/giftToSelection": {
            "post": {
                "description": "Принимает GiftToSelection в теле запроса и создает соответствующий GiftToSelection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GiftToSelection"
                ],
                "summary": "Создает новый GiftToSelection",
                "parameters": [
                    {
                        "description": "Create GiftToSelection",
                        "name": "GiftToSelection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.GiftToSelection"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/giftToSelection/{id}": {
            "get": {
                "description": "Принимает id GiftToSelection в качестве параметра пути и находит соответствующий GiftToSelection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GiftToSelection"
                ],
                "summary": "Находит существующий GiftToSelection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "GiftToSelection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "put": {
                "description": "Принимает id GiftToSelection в качестве параметра пути и обновляет соответствующий GiftToSelection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GiftToSelection"
                ],
                "summary": "Обновляет существующий GiftToSelection",
                "parameters": [
                    {
                        "description": "Update GiftToSelection",
                        "name": "GiftToSelection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.GiftToSelection"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "delete": {
                "description": "Принимает id GiftToSelection в качестве параметра пути и удаляет соответствующий GiftToSelection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GiftToSelection"
                ],
                "summary": "Удаляет существующий GiftToSelection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "GiftToSelection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/gift_category": {
            "get": {
                "description": "Get all gift categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GiftCategory"
                ],
                "summary": "Get all gift categories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/db.Gift"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new gift category based on the provided data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GiftCategory"
                ],
                "summary": "Creates a new gift category.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Gift Category object to be created",
                        "name": "GiftCategory",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.GiftCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/db.GiftCategory"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Failed to create gift category",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/gift_category/{id}": {
            "delete": {
                "description": "Deletes a gift category based on the provided category ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GiftCategory"
                ],
                "summary": "Deletes a gift category.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the gift category to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.GiftCategory"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/gift_review": {
            "post": {
                "description": "Create a new review for gift.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GiftReview"
                ],
                "summary": "Create a new review for gift.",
                "parameters": [
                    {
                        "description": "Create GiftReview",
                        "name": "Gift",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.GiftReview"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.GiftReview"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/gift_review/gift/{gift_id}": {
            "get": {
                "description": "Get all gift reviews by giftId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GiftReview"
                ],
                "summary": "Get all gift reviews by giftId",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Gift ID",
                        "name": "gift_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/db.GiftReview"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/gift_review/mark/{gift_id}": {
            "get": {
                "description": "Calculate average mark for a gift by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GiftReview"
                ],
                "summary": "Calculate average mark for a gift by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Gift ID",
                        "name": "gift_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Average mark",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/gift_review/review/{id}": {
            "get": {
                "description": "Get gift review by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GiftReview"
                ],
                "summary": "Get gift review by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "GiftReview ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/db.GiftReview"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/gift_review/{id}": {
            "delete": {
                "description": "Deletes a giftReview from the database using the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GiftReview"
                ],
                "summary": "Delete a giftReview by ID.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "GiftReview ID to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GiftReview deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error in deleteGiftReview operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/gifts": {
            "get": {
                "description": "Get all gifts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gifts"
                ],
                "summary": "Get all gifts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/db.Gift"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gifts"
                ],
                "summary": "Creates a new gift.",
                "parameters": [
                    {
                        "description": "Create Gift",
                        "name": "Gift",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Gift"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Gift"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/gifts/{id}": {
            "get": {
                "description": "Get one gift",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gifts"
                ],
                "summary": "Get one gift",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Gift ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/db.Gift"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a gift from the database using the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gifts"
                ],
                "summary": "Delete a gift by ID.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Gift ID to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Gift deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error in deleteGift operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "get the status of server.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gifts"
                ],
                "summary": "update gift by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Gift id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Gift",
                        "name": "Gift",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Gift"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Gift"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/likeToSelection": {
            "post": {
                "description": "Принимает LikeToSelection в теле запроса и создает соответствующий LikeToSelection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LikeToSelection"
                ],
                "summary": "Создает новый LikeToSelection",
                "parameters": [
                    {
                        "description": "Create LikeToSelection",
                        "name": "LikeToSelection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.LikeToSelection"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/likeToSelection/{id}": {
            "delete": {
                "description": "Принимает id LikeToSelection в качестве параметра пути и удаляет соответствующий LikeToSelection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LikeToSelection"
                ],
                "summary": "Удаляет существующий LikeToSelection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "LikeToSelection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/likeToSelection/{id}/count": {
            "get": {
                "description": "Принимает id Selection в качестве параметра пути и возвращает количество лайков для соответствующего Selection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LikeToSelection"
                ],
                "summary": "Получает количество лайков для Selection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Selection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "get the status of server.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Creates a new gift.",
                "parameters": [
                    {
                        "description": "Reg user",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/loginSeller": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logs a Seller in.",
                "parameters": [
                    {
                        "description": "Reg seller",
                        "name": "Seller",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Seller"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Seller"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/offlineshop/create": {
            "post": {
                "description": "Принимает JSON тело запроса с полями Offline Shop и создает новый Offline Shop",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OfflineShops"
                ],
                "summary": "Создает новый Offline Shop",
                "parameters": [
                    {
                        "description": "Create Offline Shop",
                        "name": "OfflineShop",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.OfflineShops"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.OfflineShops"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/offlineshop/delete/{id}": {
            "delete": {
                "description": "Принимает ID офлайн магазина в URL и удаляет соответствующий офлайн магазин",
                "tags": [
                    "OfflineShops"
                ],
                "summary": "Удаляет существующий Offline Shop по ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Offline Shop ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Offline Shop deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Offline Shop not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/offlineshop/update/{id}": {
            "put": {
                "description": "Принимает JSON тело запроса с обновленными полями Offline Shop и обновляет существующий Offline Shop по его ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OfflineShops"
                ],
                "summary": "Обновляет существующий Offline Shop по ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Offline Shop ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Offline Shop",
                        "name": "OfflineShop",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.OfflineShops"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.OfflineShops"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/offlineshops/getmany": {
            "get": {
                "description": "Возвращает список всех офлайн магазинов OfflineShops",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OfflineShops"
                ],
                "summary": "Получает список офлайн магазинов OfflineShops",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.OfflineShops"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/offlineshops/getone/{id}": {
            "get": {
                "description": "Возвращает информацию о конкретном офлайн магазине OfflineShops по его ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OfflineShops"
                ],
                "summary": "Получает один офлайн магазин OfflineShops по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "OfflineShops ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.OfflineShops"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "OfflineShops not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/quest/create": {
            "post": {
                "description": "Принимает JSON тело запроса с полями Quest и создает новый Quest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quest"
                ],
                "summary": "Создает новый Quest",
                "parameters": [
                    {
                        "description": "Create Quest",
                        "name": "Quest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Quest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Quest"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/quest/delete/{id}": {
            "delete": {
                "description": "Принимает ID квеста в URL и удаляет соответствующий квест",
                "tags": [
                    "Quest"
                ],
                "summary": "Удаляет существующий Quest по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Quest ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quest deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Quest not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/quest/getmany": {
            "get": {
                "description": "Возвращает список всех квестов Quest",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quest"
                ],
                "summary": "Получает список квестов Quest",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Quest"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/quest/getone/{id}": {
            "get": {
                "description": "Возвращает информацию о конкретном квесте Quest по его ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quest"
                ],
                "summary": "Получает один квест Quest по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Quest ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Quest"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Quest not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/quest/update": {
            "put": {
                "description": "Принимает JSON тело запроса с обновленными полями Quest и обновляет существующий Quest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quest"
                ],
                "summary": "Обновляет существующий Quest",
                "parameters": [
                    {
                        "description": "Update Quest",
                        "name": "Quest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Quest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Quest"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "get the status of server.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Creates a new gift.",
                "parameters": [
                    {
                        "description": "Reg user",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/registerSeller": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Creates a new seller.",
                "parameters": [
                    {
                        "description": "Register seller",
                        "name": "Seller",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Seller"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Seller"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/selection": {
            "get": {
                "description": "Возвращает все Selections из базы данных",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Selection"
                ],
                "summary": "Получает все Selections",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/db.Selection"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "post": {
                "description": "Принимает JSON тело запроса с полями Selection и создает новый Selection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Selection"
                ],
                "summary": "Создает новый Selection",
                "parameters": [
                    {
                        "description": "Create Selection",
                        "name": "Selection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Selection"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Selection"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/selection/{id}": {
            "delete": {
                "description": "Принимает id Selection в качестве параметра пути и удаляет соответствующий Selection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Selection"
                ],
                "summary": "Удаляет существующий Selection",
                "parameters": [
                    {
                        "description": "Create Selection",
                        "name": "Selection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Selection"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "patch": {
                "description": "Принимает id Selection в качестве параметра пути и JSON тело запроса с новыми полями Selection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Selection"
                ],
                "summary": "Обновляет существующий Selection",
                "parameters": [
                    {
                        "description": "Create Selection",
                        "name": "Selection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Selection"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Selection"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/selectionCategory": {
            "post": {
                "description": "Принимает SelectionCategory в теле запроса и создает соответствующий SelectionCategory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SelectionCategory"
                ],
                "summary": "Создает новый SelectionCategory",
                "parameters": [
                    {
                        "description": "Create SelectionCategory",
                        "name": "SelectionCategory",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.SelectionCategory"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/selectionCategory/{id}": {
            "get": {
                "description": "Принимает id SelectionCategory в качестве параметра пути и находит соответствующий SelectionCategory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SelectionCategory"
                ],
                "summary": "Находит существующий SelectionCategory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SelectionCategory ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "put": {
                "description": "Принимает id SelectionCategory в качестве параметра пути и обновляет соответствующий SelectionCategory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SelectionCategory"
                ],
                "summary": "Обновляет существующий SelectionCategory",
                "parameters": [
                    {
                        "description": "Update SelectionCategory",
                        "name": "SelectionCategory",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.SelectionCategory"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "delete": {
                "description": "Принимает id SelectionCategory в качестве параметра пути и удаляет соответствующий SelectionCategory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SelectionCategory"
                ],
                "summary": "Удаляет существующий SelectionCategory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SelectionCategory ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/sellerToService": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SellerToService"
                ],
                "summary": "Fetches all Seller-Service connections.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.SellerToService"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SellerToService"
                ],
                "summary": "Creates a new connection of Seller-Service.",
                "parameters": [
                    {
                        "description": "Create Sellers-Services",
                        "name": "SellerToService",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.SellerToService"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.SellerToService"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/sellerToService/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SellerToService"
                ],
                "summary": "Fetches all Services that belong to the speicfied Seller.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.SellerToService"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SellerToService"
                ],
                "summary": "Deletes a specified Seller-Service connection.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.SellerToService"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/serviceReviews": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServiceReviews"
                ],
                "summary": "Fetches all serviceReviews.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.ServiceReview"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServiceReviews"
                ],
                "summary": "Creates a new serviceReview.",
                "parameters": [
                    {
                        "description": "Create ServiceReview",
                        "name": "ServiceReview",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.ServiceReview"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.ServiceReview"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/serviceReviews/service/{service_id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServiceReviews"
                ],
                "summary": "Fetches all Service Reviews for a specified Service.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "service_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.ServiceReview"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/serviceReviews/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServiceReviews"
                ],
                "summary": "Fetches a specific serviceReview.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ServiceReview ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.ServiceReview"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServiceReviews"
                ],
                "summary": "Deletes a specified serviceReview.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delete ServiceReview",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.ServiceReview"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServiceReviews"
                ],
                "summary": "Updates an existing serviceReview.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ServiceReview ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update ServiceReview",
                        "name": "ServiceReview",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.ServiceReview"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.ServiceReview"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/services": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Fetches all services.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Service"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Creates a new service.",
                "parameters": [
                    {
                        "description": "Create Service",
                        "name": "Service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Service"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "seller_Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Service"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/services/seller/{seller_id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Fetches all services of a specified seller.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Service"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/services/{id}": {
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Updates an existing service.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Service",
                        "name": "Service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Service"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "seller_Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Service"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/services/{service_id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Fetches a specific service.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "service_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Service"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Deletes a specified service.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delete Service",
                        "name": "service_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "seller_Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Service"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/subquest/create": {
            "post": {
                "description": "Принимает JSON тело запроса с полями Subquest и создает новый Subquest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subquest"
                ],
                "summary": "Создает новый Subquest",
                "parameters": [
                    {
                        "description": "Create Subquest",
                        "name": "Subquest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Subquest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Subquest"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/subquest/delete/{id}": {
            "delete": {
                "description": "Принимает ID подзадания в URL и удаляет соответствующее подзадание",
                "tags": [
                    "Subquest"
                ],
                "summary": "Удаляет существующий Subquest по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subquest ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subquest deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Subquest not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/subquest/getmany": {
            "get": {
                "description": "Возвращает список всех подзаданий (Subquest)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subquest"
                ],
                "summary": "Получает список Subquest",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Subquest"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/subquest/getone/{id}": {
            "get": {
                "description": "Возвращает информацию о конкретном подзадании (Subquest) по его ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subquest"
                ],
                "summary": "Получает одно Subquest по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subquest ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Subquest"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Subquest not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tasks/create": {
            "post": {
                "description": "Принимает JSON тело запроса с полями Tasks и создает новое задание",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Создает новое задание Tasks",
                "parameters": [
                    {
                        "description": "Create Tasks",
                        "name": "Tasks",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Tasks"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Tasks"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/tasks/delete/{id}": {
            "delete": {
                "description": "Принимает ID задания в URL и удаляет соответствующее задание",
                "tags": [
                    "Tasks"
                ],
                "summary": "Удаляет существующее задание Tasks по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tasks ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Tasks not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tasks/getmany": {
            "get": {
                "description": "Возвращает список всех заданий Tasks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Получает список заданий Tasks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Tasks"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/tasks/getone/{id}": {
            "get": {
                "description": "Возвращает информацию о конкретном задании Tasks по его ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Получает одно задание Tasks по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tasks ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Tasks"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Tasks not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tasks/update": {
            "put": {
                "description": "Принимает JSON тело запроса с обновленными полями Tasks и обновляет существующее задание",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Обновляет существующее задание Tasks",
                "parameters": [
                    {
                        "description": "Update Tasks",
                        "name": "Tasks",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Tasks"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Tasks"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/upload": {
            "post": {
                "consumes": [
<<<<<<< HEAD
                    "image/jpeg",
                    "image/png"
=======
                    "application/json"
>>>>>>> 92d7160b27dc2f7b808bca803a0c5cac23d5af31
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upload"
                ],
                "summary": "Upload a beautiful picture",
                "parameters": [
                    {
<<<<<<< HEAD
                        "type": "file",
                        "description": "Upload your beautiful picture",
                        "name": "photo",
                        "in": "formData",
                        "required": true
=======
                        "description": "Upload your beautiful picture",
                        "name": "Photo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Photo"
                        }
>>>>>>> 92d7160b27dc2f7b808bca803a0c5cac23d5af31
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/wishes/{id}/{wishlist_id}": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wishes"
                ],
                "summary": "Deletes a wish from wishlist.",
                "parameters": [
                    {
                        "description": "Add wishes",
                        "name": "Wishes",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Wishes"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Wishes"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/wishes/{wishlist_id}": {
            "get": {
                "description": "get the status of server.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wishes"
                ],
                "summary": "finds all wishes in your wishlist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Wishes"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "post": {
                "description": "There you can add wish in your wishlist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wishes"
                ],
                "summary": "Adds a gift in your wishlist.",
                "parameters": [
                    {
                        "description": "Add wishes",
                        "name": "Wishes",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Wishes"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.Wishes"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/wishlists": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wishlist"
                ],
                "summary": "Finds you all of your wishlists.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Find FindManyWishlists",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/db.UserWishlist"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wishlist"
                ],
                "summary": "updates your wishlist.",
                "parameters": [
                    {
                        "description": "Create Wishlist",
                        "name": "UserWishlist",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.UserWishlist"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.UserWishlist"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            },
            "post": {
                "description": "There is handler that creates a new wishlist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wishlist"
                ],
                "summary": "Creates a brand new wishlist.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.UserWishlist"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/wishlists/{name}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wishlist"
                ],
                "summary": "Finds wishlist by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delete ServiceReview",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.UserWishlist"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/wishlists/{wishlist_id}/{gift_id}": {
            "delete": {
                "description": "delete a wishlist and wishes related with it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wishlist"
                ],
                "summary": "Deletes your wishlist.",
                "parameters": [
                    {
                        "description": "Delete Wishlist",
                        "name": "Wishlist",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.UserWishlist"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/db.UserWishlist"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseHTTP"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "db.BookedGiftInWishlist": {
            "type": "object",
            "required": [
                "gift_id",
                "user_id"
            ],
            "properties": {
                "gift_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "db.CommentToSelection": {
            "type": "object",
            "required": [
                "selection_id",
                "text",
                "user_id"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "selection_id": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "db.Gift": {
            "type": "object",
            "required": [
                "link",
                "name",
                "price"
            ],
            "properties": {
                "category": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "description": "LIFEHACK: use string id like 'gift_ajdsjanjklsnls'",
                    "type": "string"
                },
                "link": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "photo": {
                    "type": "string"
                },
                "price": {
                    "description": "TODO: use decimal.Decimal instead of int",
                    "type": "integer"
                }
            }
        },
        "db.GiftCategory": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "db.GiftReview": {
            "type": "object",
            "required": [
                "gift_id",
                "mark"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "gift_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mark": {
                    "type": "number"
                }
            }
        },
        "db.GiftToSelection": {
            "type": "object",
            "properties": {
                "gift_id": {
                    "type": "string"
                },
                "selection_id": {
                    "type": "string"
                }
            }
        },
        "db.LikeToSelection": {
            "type": "object",
            "required": [
                "selection_id",
                "user_id"
            ],
            "properties": {
                "selection_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "db.OfflineShops": {
            "type": "object",
            "required": [
                "location",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
<<<<<<< HEAD
=======
        "db.Photo": {
            "type": "object",
            "properties": {
                "photo": {
                    "type": "string"
                }
            }
        },
>>>>>>> 92d7160b27dc2f7b808bca803a0c5cac23d5af31
        "db.Quest": {
            "type": "object",
            "required": [
                "is_done",
                "subquest_id",
                "user_id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "is_done": {
                    "type": "boolean"
                },
                "subquest_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "db.Selection": {
            "type": "object",
            "required": [
                "name",
                "user_id"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_generated": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "db.SelectionCategory": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "db.Seller": {
            "type": "object",
            "required": [
                "login",
                "name",
                "password"
            ],
            "properties": {
                "login": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50
                },
                "password": {
                    "type": "string"
                },
                "photo": {
                    "type": "string"
                },
                "role_name": {
                    "type": "string"
                }
            }
        },
        "db.SellerToService": {
            "type": "object",
            "required": [
                "seller_id",
                "service_id"
            ],
            "properties": {
                "seller_id": {
                    "type": "string"
                },
                "service_id": {
                    "type": "string"
                }
            }
        },
        "db.Service": {
            "type": "object",
            "required": [
                "location",
                "name",
                "price"
            ],
            "properties": {
                "location": {
                    "type": "string",
                    "minLength": 5
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 5
                },
                "photos": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                }
            }
        },
        "db.ServiceReview": {
            "type": "object",
            "required": [
                "comment",
                "mark",
                "service_id",
                "user_id"
            ],
            "properties": {
                "comment": {
                    "type": "string",
                    "maxLength": 5000
                },
                "mark": {
                    "type": "number"
                },
                "service_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "db.Subquest": {
            "type": "object",
            "required": [
                "reward",
                "task_id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "is_done": {
                    "type": "boolean"
                },
                "reward": {
                    "type": "integer"
                },
                "task_id": {
                    "type": "string"
                }
            }
        },
        "db.Tasks": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "db.User": {
            "type": "object",
            "required": [
                "birthday",
                "lastname",
                "login",
                "name",
                "password"
            ],
            "properties": {
                "birthday": {
                    "type": "string"
                },
                "coins": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role_name": {
                    "type": "string"
                }
            }
        },
        "db.UserWishlist": {
            "type": "object",
            "required": [
                "name",
                "user_id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "db.Wishes": {
            "type": "object",
            "required": [
                "gift_id",
                "wishlist_id"
            ],
            "properties": {
                "gift_id": {
                    "type": "string"
                },
                "wishlist_id": {
                    "type": "string"
                }
            }
        },
        "server.ResponseHTTP": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    }
}