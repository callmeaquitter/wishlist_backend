basePath: /
definitions:
  db.Gift:
    properties:
      comments:
        type: string
      description:
        type: string
      id:
        description: 'LIFEHACK: use string id like ''gift_ajdsjanjklsnls'''
        type: string
      is_favorite:
        type: boolean
      link:
        type: string
      name:
        description: UserID      string `json:"user_id"`
        type: string
      photo:
        type: string
      price:
        description: 'TODO: use decimal.Decimal instead of int'
        type: integer
    type: object
  db.OfflineShops:
    properties:
      id:
        type: string
      location:
        type: string
      name:
        type: string
    type: object
  db.Quest:
    properties:
      id:
        type: string
      is_done:
        type: boolean
      subquest_id:
        type: string
      user_id:
        type: string
    type: object
  db.Subquest:
    properties:
      id:
        type: string
      is_done:
        type: integer
      reward:
        type: integer
      task_id:
        type: string
    type: object
  db.Tasks:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  server.ResponseHTTP:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:7777
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Wishlist
  version: "1.0"
paths:
  /:
    post:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/server.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/db.Gift'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ResponseHTTP'
      summary: Creates a new gift.
      tags:
      - Gift
  /offlineshop/create:
    post:
      consumes:
      - application/json
      description: Принимает JSON тело запроса с полями Offline Shop и создает новый
        Offline Shop
      parameters:
      - description: Create Offline Shop
        in: body
        name: OfflineShop
        required: true
        schema:
          $ref: '#/definitions/db.OfflineShops'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/server.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/db.OfflineShops'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ResponseHTTP'
      summary: Создает новый Offline Shop
      tags:
      - OfflineShops
  /offlineshop/delete/{id}:
    delete:
      description: Принимает ID офлайн магазина в URL и удаляет соответствующий офлайн
        магазин
      parameters:
      - description: Offline Shop ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Offline Shop deleted successfully
          schema:
            type: string
        "404":
          description: Offline Shop not found
          schema:
            type: string
      summary: Удаляет существующий Offline Shop по ID
      tags:
      - OfflineShops
  /offlineshop/update/{id}:
    put:
      consumes:
      - application/json
      description: Принимает JSON тело запроса с обновленными полями Offline Shop
        и обновляет существующий Offline Shop по его ID
      parameters:
      - description: Offline Shop ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Offline Shop
        in: body
        name: OfflineShop
        required: true
        schema:
          $ref: '#/definitions/db.OfflineShops'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/server.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/db.OfflineShops'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ResponseHTTP'
      summary: Обновляет существующий Offline Shop по ID
      tags:
      - OfflineShops
  /offlineshops/getmany:
    get:
      description: Возвращает список всех офлайн магазинов OfflineShops
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/server.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/db.OfflineShops'
              type: object
      summary: Получает список офлайн магазинов OfflineShops
      tags:
      - OfflineShops
  /offlineshops/getone/{id}:
    get:
      description: Возвращает информацию о конкретном офлайн магазине OfflineShops
        по его ID
      parameters:
      - description: OfflineShops ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/server.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/db.OfflineShops'
              type: object
        "404":
          description: OfflineShops not found
          schema:
            type: string
      summary: Получает один офлайн магазин OfflineShops по ID
      tags:
      - OfflineShops
  /quest/create:
    post:
      consumes:
      - application/json
      description: Принимает JSON тело запроса с полями Quest и создает новый Quest
      parameters:
      - description: Create Quest
        in: body
        name: Quest
        required: true
        schema:
          $ref: '#/definitions/db.Quest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/server.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/db.Quest'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ResponseHTTP'
      summary: Создает новый Quest
      tags:
      - Quest
  /quest/delete/{id}:
    delete:
      description: Принимает ID квеста в URL и удаляет соответствующий квест
      parameters:
      - description: Quest ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Quest deleted successfully
          schema:
            type: string
        "404":
          description: Quest not found
          schema:
            type: string
      summary: Удаляет существующий Quest по ID
      tags:
      - Quest
  /quest/getmany:
    get:
      description: Возвращает список всех квестов Quest
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/server.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/db.Quest'
              type: object
      summary: Получает список квестов Quest
      tags:
      - Quest
  /quest/getone/{id}:
    get:
      description: Возвращает информацию о конкретном квесте Quest по его ID
      parameters:
      - description: Quest ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/server.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/db.Quest'
              type: object
        "404":
          description: Quest not found
          schema:
            type: string
      summary: Получает один квест Quest по ID
      tags:
      - Quest
  /quest/update:
    put:
      consumes:
      - application/json
      description: Принимает JSON тело запроса с обновленными полями Quest и обновляет
        существующий Quest
      parameters:
      - description: Update Quest
        in: body
        name: Quest
        required: true
        schema:
          $ref: '#/definitions/db.Quest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/server.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/db.Quest'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ResponseHTTP'
      summary: Обновляет существующий Quest
      tags:
      - Quest
  /subquest/create:
    post:
      consumes:
      - application/json
      description: Принимает JSON тело запроса с полями Subquest и создает новый Subquest
      parameters:
      - description: Create Subquest
        in: body
        name: Subquest
        required: true
        schema:
          $ref: '#/definitions/db.Subquest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/server.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/db.Subquest'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ResponseHTTP'
      summary: Создает новый Subquest
      tags:
      - Subquest
  /subquest/delete/{id}:
    delete:
      description: Принимает ID подзадания в URL и удаляет соответствующее подзадание
      parameters:
      - description: Subquest ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Subquest deleted successfully
          schema:
            type: string
        "404":
          description: Subquest not found
          schema:
            type: string
      summary: Удаляет существующий Subquest по ID
      tags:
      - Subquest
  /subquest/getmany:
    get:
      description: Возвращает список всех подзаданий (Subquest)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/server.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/db.Subquest'
              type: object
      summary: Получает список Subquest
      tags:
      - Subquest
  /subquest/getone/{id}:
    get:
      description: Возвращает информацию о конкретном подзадании (Subquest) по его
        ID
      parameters:
      - description: Subquest ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/server.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/db.Subquest'
              type: object
        "404":
          description: Subquest not found
          schema:
            type: string
      summary: Получает одно Subquest по ID
      tags:
      - Subquest
  /tasks/create:
    post:
      consumes:
      - application/json
      description: Принимает JSON тело запроса с полями Tasks и создает новое задание
      parameters:
      - description: Create Tasks
        in: body
        name: Tasks
        required: true
        schema:
          $ref: '#/definitions/db.Tasks'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/server.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/db.Tasks'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ResponseHTTP'
      summary: Создает новое задание Tasks
      tags:
      - Tasks
  /tasks/delete/{id}:
    delete:
      description: Принимает ID задания в URL и удаляет соответствующее задание
      parameters:
      - description: Tasks ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Tasks deleted successfully
          schema:
            type: string
        "404":
          description: Tasks not found
          schema:
            type: string
      summary: Удаляет существующее задание Tasks по ID
      tags:
      - Tasks
  /tasks/getmany:
    get:
      description: Возвращает список всех заданий Tasks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/server.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/db.Tasks'
              type: object
      summary: Получает список заданий Tasks
      tags:
      - Tasks
  /tasks/getone/{id}:
    get:
      description: Возвращает информацию о конкретном задании Tasks по его ID
      parameters:
      - description: Tasks ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/server.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/db.Tasks'
              type: object
        "404":
          description: Tasks not found
          schema:
            type: string
      summary: Получает одно задание Tasks по ID
      tags:
      - Tasks
  /tasks/update:
    put:
      consumes:
      - application/json
      description: Принимает JSON тело запроса с обновленными полями Tasks и обновляет
        существующее задание
      parameters:
      - description: Update Tasks
        in: body
        name: Tasks
        required: true
        schema:
          $ref: '#/definitions/db.Tasks'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/server.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/db.Tasks'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ResponseHTTP'
      summary: Обновляет существующее задание Tasks
      tags:
      - Tasks
swagger: "2.0"
